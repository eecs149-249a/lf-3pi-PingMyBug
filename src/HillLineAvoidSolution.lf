target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
  }
  
  import Line from "lib/Line.lf"
  import Display from "lib/Display.lf"
  import Motors from "lib/Motors.lf"
  import GyroAngle, Accelerometer, Gyro from "lib/IMU.lf"
  import Encoders from "lib/Encoders.lf"
  import Tilt from "lib/Tilt.lf"

  preamble {=
    #define WHEEL_DIAMETER 0.03175  // in meters
    #define PI 3.14159265358979323846
  =}

reactor AngleToDistance {
    input angle:int32_t;
    output distance:float;
  
    reaction(angle) -> distance {=
        float circumference = PI * WHEEL_DIAMETER;
        float distanceTraveled = (angle->value / 360.0) * circumference;
        lf_set(distance, distanceTraveled);
    =}
  }
  
  main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
    preamble {=
        #define UPHILL_SPEED 0.18
        #define DOWNHILL_SPEED 0.07
        #define FORWARD_SPEED 0.15
        #define TURN_SPEED 0.13
        #define TURN_ANGLE 15.0
        #define DRIVE_DISTANCE 0.5 
        #define BACKUP_DISTANCE 0.01
        #define CONTINUE_DIST 0.7
        #define DARK_THRESHOLD 900
    =}

    line = new Line()
    display = new Display()
    motors = new Motors()
    gyro = new GyroAngle()
    a = new Accelerometer()
    tilt = new Tilt()
    g = new Gyro()
    encoders = new Encoders()



    angleToDistanceLeft = new AngleToDistance()
    angleToDistanceRight = new AngleToDistance()

    state didTurn: bool = false;
    state gotUphill: bool = false;
    state goingDown: bool = false;
  
    state lastAngle: float = 0.0;
    state lastLeft: float = 0.0;
    state lastRight: float = 0.0;

    state leftLine: bool = false;
    state centerLine: bool = false;
    state rightLine: float = false;

    timer t(0, 10ms)
    // Timer used to display seconds.
    timer seconds(0, 1 s)
    timer end_calibration(calibration_time)
    state count: int = 0
  
    method resett(ld: float, lr: float, la: float) {=
      self->lastLeft = ld;
      self->lastRight = lr;
      self->lastAngle = la;
    =}

    reaction(t) -> a.trigger, gyro.trigger, encoders.trigger {=
        lf_set(gyro.trigger, true);
        lf_set(a.trigger, true);
        lf_set(encoders.trigger, true);
    =}


    encoders.left -> angleToDistanceLeft.angle
    encoders.right -> angleToDistanceRight.angle

    
    reaction(startup) -> display.line0, display.line1, display.line2 {=
      lf_set(display.line0, "CALIBRATING");
      lf_set(display.line1, "Roll robot over");
      lf_set(display.line2, "light and dark.");
    =}
  


    reaction(a.x, a.y, a.z) ->tilt.x, tilt.y, tilt.z {=
        float x = 1.04 * a.x->value - 0.026;
        float y = 0.99 * a.y->value + 0.003;
        float z = a.z->value - 0.013;

        lf_set(tilt.x, x);
        lf_set(tilt.y, y);
        lf_set(tilt.z, z);
    =}

    reaction(tilt.pitch, tilt.roll) -> display.line2, display.line1 {=
        static char buf0[17];
        static char buf1[17];

        snprintf(buf0, 17, "roll:%2.4f", tilt.roll->value);
        snprintf(buf1, 17, "pitch:%2.4f", tilt.pitch->value);

        
        lf_set(display.line2, buf0);
        lf_set(display.line1, buf1);
    =}

    initial mode DRIVINGFORWARD {

        reaction(angleToDistanceLeft.distance, angleToDistanceRight.distance) tilt.roll, tilt.pitch, gyro.z -> TURN_UPHILL, ROTATE_L, ROTATE_R, motors.left_power, motors.right_power, TURNING_R, display.line0 {=

            if (tilt.pitch-> value < 10){
              lf_set(motors.left_power, 0);
              lf_set(motors.right_power, 0);
              lf_set_mode(TURN_UPHILL);
            }
            else if(tilt.roll->value < -4){
              lf_set(motors.left_power, 0);
              lf_set(motors.right_power, 0);
              lf_set_mode(ROTATE_R);
            }
            else if(tilt.roll->value > 4){
              lf_set(motors.left_power, 0);
              lf_set(motors.right_power, 0);
              lf_set_mode(ROTATE_L);
            }
            
            else{
              lf_set(display.line0, "UPHILL");
              self->gotUphill = true;
              lf_set(motors.left_power, UPHILL_SPEED);
              lf_set(motors.right_power, UPHILL_SPEED);
            }  
        =}
    }

    mode DRIVEDOWN {

      reaction(angleToDistanceLeft.distance, angleToDistanceRight.distance) tilt.roll, tilt.pitch, gyro.z -> TURN_UPHILL, ROTATE_L, ROTATE_R, motors.left_power, motors.right_power, TURNING_R, display.line0 {=
          self->goingDown = true;

          if(tilt.roll->value < -4){
            lf_set(motors.left_power, 0);
            lf_set(motors.right_power, 0);
            lf_set_mode(ROTATE_L);
          }
          else if(tilt.roll->value > 4){
            lf_set(motors.left_power, 0);
            lf_set(motors.right_power, 0);
            lf_set_mode(ROTATE_R);
          }
          
          else{
            lf_set(display.line0, "DOWNHILL");
            lf_set(motors.left_power, DOWNHILL_SPEED);
            lf_set(motors.right_power, DOWNHILL_SPEED);
          }  
      =}
  }

    mode ROTATE_L{
      reaction(tilt.roll) -> motors.left_power, motors.right_power, DRIVEDOWN, CONTINUE, DRIVINGFORWARD, display.line0 {=

          lf_set(display.line0, "ROTATING LEFT");
          lf_set(motors.left_power, -TURN_SPEED);
          lf_set(motors.right_power, TURN_SPEED);

          if (tilt.roll->value <= 1) {

            if (self->goingDown){
              lf_set_mode(DRIVEDOWN);
            }else{
              lf_set_mode(DRIVINGFORWARD);
            }
          }
      =}
    }

    mode ROTATE_R{
      reaction(tilt.roll) -> motors.left_power, motors.right_power, DRIVEDOWN, DRIVINGFORWARD, display.line0 {=

          lf_set(display.line0, "ROTATING RIGHT");
          lf_set(motors.left_power, TURN_SPEED);
          lf_set(motors.right_power, -TURN_SPEED);

          if (tilt.roll->value >= -1) {
            if (self->goingDown){
              lf_set_mode(DRIVEDOWN);
            }else{
              lf_set_mode(DRIVINGFORWARD);
            }
          }
      =}
    }

    mode TURN_UPHILL{
      reaction(t, angleToDistanceLeft.distance, angleToDistanceRight.distance, tilt.pitch) -> motors.left_power, motors.right_power, CONTINUE, DRIVINGFORWARD, display.line0 {=
          if(self->gotUphill){
            lf_set_mode(CONTINUE);
          }

          lf_set(display.line0, "ROTATING UPHILL");
          lf_set(motors.left_power, -TURN_SPEED);
          lf_set(motors.right_power, TURN_SPEED);

          if (tilt.pitch->value >= 12) {
            self->gotUphill = true;
            lf_set_mode(DRIVINGFORWARD);
          }
      =}
    }
    
    mode TURNING_L {
          reaction(t, angleToDistanceLeft.distance, angleToDistanceRight.distance, gyro.z) -> motors.left_power, motors.right_power, DRIVINGFORWARD, display.line0 {=

              lf_set(display.line0, "Turning Left");
              lf_set(motors.left_power, -TURN_SPEED);
              lf_set(motors.right_power, TURN_SPEED);
    
              if (fabs(gyro.z->value - self->lastAngle) >= TURN_ANGLE) {
                resett(angleToDistanceLeft.distance->value, angleToDistanceRight.distance->value, gyro.z->value);
                  lf_set_mode(DRIVINGFORWARD);
              }
          =}
 
    
      }
    
      mode TURNING_R {
        reaction(t, angleToDistanceLeft.distance, angleToDistanceRight.distance, gyro.z) -> motors.left_power, motors.right_power, DRIVINGFORWARD, display.line0 {=

            lf_set(display.line0, "Turning Right");
            lf_set(motors.left_power, TURN_SPEED);
            lf_set(motors.right_power, -TURN_SPEED);
    
            if (fabs(gyro.z->value - self->lastAngle) >= TURN_ANGLE) {
                resett(angleToDistanceLeft.distance->value, angleToDistanceRight.distance->value, gyro.z->value);
                lf_set_mode(DRIVINGFORWARD);
            }
        =}
    
    }

    mode TURN_AROUND {
        reaction(t, angleToDistanceLeft.distance, angleToDistanceRight.distance, gyro.z) -> motors.left_power, motors.right_power, DRIVEDOWN, display.line0 {=

              lf_set(display.line0, "Turning Around");
              lf_set(motors.left_power, TURN_SPEED);
              lf_set(motors.right_power, -TURN_SPEED);
      
              if (fabs(gyro.z->value - self->lastAngle) >= 160) {
                  resett(angleToDistanceLeft.distance->value, angleToDistanceRight.distance->value, gyro.z->value);
                  self->goingDown = true;

                  lf_set_mode(DRIVEDOWN);
              }
          =}
    }

    mode CONTINUE {
      reaction(t, angleToDistanceLeft.distance, angleToDistanceRight.distance) gyro.z -> ROTATE_L, motors.left_power, motors.right_power, TURN_AROUND, display.line0 {=
              lf_set(motors.left_power, FORWARD_SPEED);
              lf_set(motors.right_power, FORWARD_SPEED);
              lf_set(display.line0, "CONTINUE");
              if (angleToDistanceLeft.distance->value - self->lastLeft >= CONTINUE_DIST && angleToDistanceRight.distance->value - self->lastRight >= CONTINUE_DIST) {

                resett(angleToDistanceLeft.distance->value, angleToDistanceRight.distance->value, gyro.z->value);
                lf_set_mode(TURN_AROUND);
              }
      =}
      
  }
  }