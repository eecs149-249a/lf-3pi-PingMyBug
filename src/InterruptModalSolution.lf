target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
    keepalive: true
  }
  
import Display from "lib/Display.lf"

main reactor InterruptModalSolution {
    preamble {=
        #include <stdio.h>
        #include <pico/stdlib.h>
        #include <hardware/gpio.h>
        static void * action;
        void gpio_callback(uint gpio, uint32_t events){
            printf("GPIO: %u, Events: %u\n", gpio, events);
            lf_schedule(action, 0);
        }
    =}

    d = new Display()
    state count:int;
    timer up(0, 500 ms);
    timer down(0, 1 sec);
    physical action buttonPress;
    reaction(startup) -> buttonPress {=
        gpio_init(PICO_DEFAULT_LED_PIN);
        gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_IN);
        gpio_set_irq_enabled_with_callback(PICO_DEFAULT_LED_PIN, 
        GPIO_IRQ_EDGE_FALL , true, &gpio_callback);
        action = buttonPress;
    =} 

    initial mode CountingUp {
        reaction(up)  {=
            self->count++;
            printf("Counting up: %d\n", self->count);

        =}
        reaction(buttonPress) -> CountingDown, d.line0 {=
            lf_set(d.line0, self->count);
            lf_set_mode(CountingDown);
        =}
    }

    mode CountingDown {
        reaction(down) {=
            self->count++;
            printf("Counting down: %d\n", self->count);

        =}
        reaction(buttonPress) -> CountingUp, d.line0 {=
            lf_set(d.line0, self->count);
            lf_set_mode(CountingUp);

        =}
    }
}

