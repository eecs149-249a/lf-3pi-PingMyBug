target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
    keepalive: true,
    timeout: 200ms
  }

main reactor InterruptDebouncedSolution {
    preamble {=
        #include <stdio.h>
        #include <pico/stdlib.h>
        #include <hardware/gpio.h>
        static void * action;
        static instant_t last_time_pressed = 0;
        void gpio_callback(uint gpio, uint32_t events){
            // instant_t curr_time = lf_time_physical();
            printf("GPIO: %u, Events: %u\n", gpio, events);
            lf_schedule(action, 0);
            // if (curr_time - last_time_pressed > 200000000) {
            //     printf("GPIO: %u, Events: %u\n", gpio, events);
            //     lf_schedule(action, 0);
            //     last_time_pressed = curr_time;
            // }
        }
    =}

    physical action buttonPress;
    reaction(startup) -> buttonPress {=
        action = buttonPress;
        gpio_init(PICO_DEFAULT_LED_PIN);
        gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_IN);
        gpio_set_irq_enabled_with_callback(PICO_DEFAULT_LED_PIN, 
        GPIO_IRQ_EDGE_FALL, true, &gpio_callback);
    =} 
    state last_time_pressed:interval_t = 0;
    reaction(buttonPress) {=
        interval_t t_current_physical = lf_time_physical_elapsed();
        printf("Time since last push: %lld ns \n", (t_current_physical - self->last_time_pressed));
        self->last_time_pressed = t_current_physical;
    =}
}

